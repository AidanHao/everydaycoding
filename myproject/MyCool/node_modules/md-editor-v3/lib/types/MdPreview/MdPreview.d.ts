declare const MdPreview: import("vue").DefineComponent<{
    readonly style: string | import("vue").CSSProperties;
    readonly class: string;
    readonly language: string;
    readonly modelValue: string;
    readonly theme: import("../MdEditor/type").Themes;
    readonly showCodeRowNumber: boolean;
    readonly previewTheme: string;
    readonly mdHeadingId: import("../MdEditor/type").MdHeadingId;
    readonly sanitize: (html: string) => string;
    readonly noMermaid: boolean;
    readonly noKatex: boolean;
    readonly codeTheme: string;
    readonly formatCopiedText: (text: string) => string;
    readonly codeStyleReverse: boolean;
    readonly codeStyleReverseList: string[];
    readonly noHighlight: boolean;
    readonly noImgZoomIn: boolean;
    readonly customIcon: {
        bold?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        underline?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        italic?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "strike-through"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        title?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        sub?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        sup?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        quote?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "unordered-list"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "ordered-list"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        task?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "code-row"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        code?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        link?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        image?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        table?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        revoke?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        next?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        save?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        prettier?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        minimize?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        maximize?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "fullscreen-exit"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        fullscreen?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "preview-only"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        preview?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "preview-html"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        catalog?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        github?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        mermaid?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        formula?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        close?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        delete?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        upload?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
    } & import("../MdEditor/type").CustomStrIcon;
    readonly sanitizeMermaid: (h: string) => Promise<string>;
    readonly codeFoldable: boolean;
    readonly autoFoldThreshold: number;
    readonly onChange: import("../MdEditor/type").ChangeEvent | undefined;
    readonly onHtmlChanged: import("../MdEditor/type").HtmlChangedEvent | undefined;
    readonly onGetCatalog: import("../MdEditor/type").GetCatalogEvent | undefined;
    readonly onRemount: (() => void) | undefined;
    readonly id: string | undefined;
    readonly editorId: string | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("../MdEditor/type").EditorEmits, "onChange" | "onSave" | "onUploadImg" | "onHtmlChanged" | "onGetCatalog" | "onError" | "update:modelValue" | "onBlur" | "onFocus" | "onInput" | "onDrop" | "oninputBoxWidthChange" | "onRemount", import("vue").PublicProps, Readonly<{
    readonly style: string | import("vue").CSSProperties;
    readonly class: string;
    readonly language: string;
    readonly modelValue: string;
    readonly theme: import("../MdEditor/type").Themes;
    readonly showCodeRowNumber: boolean;
    readonly previewTheme: string;
    readonly mdHeadingId: import("../MdEditor/type").MdHeadingId;
    readonly sanitize: (html: string) => string;
    readonly noMermaid: boolean;
    readonly noKatex: boolean;
    readonly codeTheme: string;
    readonly formatCopiedText: (text: string) => string;
    readonly codeStyleReverse: boolean;
    readonly codeStyleReverseList: string[];
    readonly noHighlight: boolean;
    readonly noImgZoomIn: boolean;
    readonly customIcon: {
        bold?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        underline?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        italic?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "strike-through"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        title?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        sub?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        sup?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        quote?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "unordered-list"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "ordered-list"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        task?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "code-row"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        code?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        link?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        image?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        table?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        revoke?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        next?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        save?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        prettier?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        minimize?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        maximize?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "fullscreen-exit"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        fullscreen?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "preview-only"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        preview?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        "preview-html"?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        catalog?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        github?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        mermaid?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        formula?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        close?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        delete?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
        upload?: {
            component: import("vue").Component | import("vue").VNode | string;
            props?: {
                [key: string | number | symbol]: any;
            };
        } | undefined;
    } & import("../MdEditor/type").CustomStrIcon;
    readonly sanitizeMermaid: (h: string) => Promise<string>;
    readonly codeFoldable: boolean;
    readonly autoFoldThreshold: number;
    readonly onChange: import("../MdEditor/type").ChangeEvent | undefined;
    readonly onHtmlChanged: import("../MdEditor/type").HtmlChangedEvent | undefined;
    readonly onGetCatalog: import("../MdEditor/type").GetCatalogEvent | undefined;
    readonly onRemount: (() => void) | undefined;
    readonly id: string | undefined;
    readonly editorId: string | undefined;
}> & Readonly<{
    onOnChange?: ((...args: any[]) => any) | undefined;
    onOnSave?: ((...args: any[]) => any) | undefined;
    onOnUploadImg?: ((...args: any[]) => any) | undefined;
    onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
    onOnGetCatalog?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOnBlur?: ((...args: any[]) => any) | undefined;
    onOnFocus?: ((...args: any[]) => any) | undefined;
    onOnInput?: ((...args: any[]) => any) | undefined;
    onOnDrop?: ((...args: any[]) => any) | undefined;
    onOninputBoxWidthChange?: ((...args: any[]) => any) | undefined;
    onOnRemount?: ((...args: any[]) => any) | undefined;
}>, {
    onChange: import("../MdEditor/type").ChangeEvent;
    onHtmlChanged: import("../MdEditor/type").HtmlChangedEvent;
    onGetCatalog: import("../MdEditor/type").GetCatalogEvent;
    onRemount: () => void;
    style: string | import("vue").CSSProperties;
    class: string;
    id: string;
    language: string;
    modelValue: string;
    theme: import("../MdEditor/type").Themes;
    editorId: string;
    showCodeRowNumber: boolean;
    previewTheme: string;
    mdHeadingId: import("../MdEditor/type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    codeTheme: string;
    formatCopiedText: (text: string) => string;
    codeStyleReverse: boolean;
    codeStyleReverseList: string[];
    noHighlight: boolean;
    noImgZoomIn: boolean;
    customIcon: import("../MdEditor/type").CustomIcon;
    sanitizeMermaid: (h: string) => Promise<string>;
    codeFoldable: boolean;
    autoFoldThreshold: number;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default MdPreview;
