declare const _default: import("vue").DefineComponent<{
    readonly previewOnly: boolean;
    readonly onChange: (v: string) => void;
    readonly onHtmlChanged: (h: string) => void;
    readonly onGetCatalog: (list: import("../../type").HeadList[]) => void;
    readonly onBlur: (event: FocusEvent) => void;
    readonly onFocus: (event: FocusEvent) => void;
    readonly onDrop: (event: DragEvent) => void;
    readonly placeholder: string;
    readonly transformImgUrl: (t: string) => string | Promise<string>;
    readonly modelValue: string;
    readonly theme: import("../../type").Themes;
    readonly mdHeadingId: import("../../type").MdHeadingId;
    readonly sanitize: (html: string) => string;
    readonly noMermaid: boolean;
    readonly noKatex: boolean;
    readonly formatCopiedText: (text: string) => string;
    readonly noHighlight: boolean;
    readonly setting: import("../../type").SettingType;
    readonly updateModelValue: (v: string) => void;
    readonly onInput: ((event: Event) => void) | undefined;
    readonly oninputBoxWidthChange: ((width: string) => void) | undefined;
    readonly onRemount: (() => void) | undefined;
    readonly noPrettier: boolean | undefined;
    readonly scrollAuto: boolean | undefined;
    readonly disabled: boolean | undefined;
    readonly autoDetectCode: boolean | undefined;
    readonly completions: import("@codemirror/autocomplete").CompletionSource[] | undefined;
    readonly inputBoxWidth: string | undefined;
    readonly catalogLayout: "fixed" | "flat" | undefined;
    readonly catalogMaxDepth: number | undefined;
    readonly noImgZoomIn: boolean | undefined;
    readonly sanitizeMermaid: ((h: string) => Promise<string>) | undefined;
    readonly codeFoldable: boolean | undefined;
    readonly autoFoldThreshold: number | undefined;
    readonly autofocus: boolean | undefined;
    readonly catalogVisible: boolean | undefined;
    readonly readonly: boolean | undefined;
    readonly maxlength: number | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
    readonly previewOnly: boolean;
    readonly onChange: (v: string) => void;
    readonly onHtmlChanged: (h: string) => void;
    readonly onGetCatalog: (list: import("../../type").HeadList[]) => void;
    readonly onBlur: (event: FocusEvent) => void;
    readonly onFocus: (event: FocusEvent) => void;
    readonly onDrop: (event: DragEvent) => void;
    readonly placeholder: string;
    readonly transformImgUrl: (t: string) => string | Promise<string>;
    readonly modelValue: string;
    readonly theme: import("../../type").Themes;
    readonly mdHeadingId: import("../../type").MdHeadingId;
    readonly sanitize: (html: string) => string;
    readonly noMermaid: boolean;
    readonly noKatex: boolean;
    readonly formatCopiedText: (text: string) => string;
    readonly noHighlight: boolean;
    readonly setting: import("../../type").SettingType;
    readonly updateModelValue: (v: string) => void;
    readonly onInput: ((event: Event) => void) | undefined;
    readonly oninputBoxWidthChange: ((width: string) => void) | undefined;
    readonly onRemount: (() => void) | undefined;
    readonly noPrettier: boolean | undefined;
    readonly scrollAuto: boolean | undefined;
    readonly disabled: boolean | undefined;
    readonly autoDetectCode: boolean | undefined;
    readonly completions: import("@codemirror/autocomplete").CompletionSource[] | undefined;
    readonly inputBoxWidth: string | undefined;
    readonly catalogLayout: "fixed" | "flat" | undefined;
    readonly catalogMaxDepth: number | undefined;
    readonly noImgZoomIn: boolean | undefined;
    readonly sanitizeMermaid: ((h: string) => Promise<string>) | undefined;
    readonly codeFoldable: boolean | undefined;
    readonly autoFoldThreshold: number | undefined;
    readonly autofocus: boolean | undefined;
    readonly catalogVisible: boolean | undefined;
    readonly readonly: boolean | undefined;
    readonly maxlength: number | undefined;
}> & Readonly<{}>, {
    previewOnly: boolean;
    onChange: (v: string) => void;
    onHtmlChanged: (h: string) => void;
    onGetCatalog: (list: import("../../type").HeadList[]) => void;
    onBlur: (event: FocusEvent) => void;
    onFocus: (event: FocusEvent) => void;
    onDrop: (event: DragEvent) => void;
    placeholder: string;
    transformImgUrl: (t: string) => string | Promise<string>;
    modelValue: string;
    theme: import("../../type").Themes;
    mdHeadingId: import("../../type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    formatCopiedText: (text: string) => string;
    noHighlight: boolean;
    setting: import("../../type").SettingType;
    updateModelValue: (v: string) => void;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
