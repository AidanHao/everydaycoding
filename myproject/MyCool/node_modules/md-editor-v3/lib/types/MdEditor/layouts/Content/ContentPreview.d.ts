import { ExtractPropTypes } from 'vue';
import { LooseRequired } from '@vue/shared';
import { contentPreviewProps } from './props';
export type ContentPreviewProps = Readonly<LooseRequired<Readonly<ExtractPropTypes<typeof contentPreviewProps>>>>;
declare const ContentPreview: import("vue").DefineComponent<{
    readonly previewOnly: boolean;
    readonly onChange: (v: string) => void;
    readonly onHtmlChanged: (h: string) => void;
    readonly onGetCatalog: (list: import("../../type").HeadList[]) => void;
    readonly modelValue: string;
    readonly mdHeadingId: import("../../type").MdHeadingId;
    readonly sanitize: (html: string) => string;
    readonly noMermaid: boolean;
    readonly noKatex: boolean;
    readonly formatCopiedText: (text: string) => string;
    readonly noHighlight: boolean;
    readonly setting: import("../../type").SettingType;
    readonly onRemount: (() => void) | undefined;
    readonly noImgZoomIn: boolean | undefined;
    readonly sanitizeMermaid: ((h: string) => Promise<string>) | undefined;
    readonly codeFoldable: boolean | undefined;
    readonly autoFoldThreshold: number | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
    readonly previewOnly: boolean;
    readonly onChange: (v: string) => void;
    readonly onHtmlChanged: (h: string) => void;
    readonly onGetCatalog: (list: import("../../type").HeadList[]) => void;
    readonly modelValue: string;
    readonly mdHeadingId: import("../../type").MdHeadingId;
    readonly sanitize: (html: string) => string;
    readonly noMermaid: boolean;
    readonly noKatex: boolean;
    readonly formatCopiedText: (text: string) => string;
    readonly noHighlight: boolean;
    readonly setting: import("../../type").SettingType;
    readonly onRemount: (() => void) | undefined;
    readonly noImgZoomIn: boolean | undefined;
    readonly sanitizeMermaid: ((h: string) => Promise<string>) | undefined;
    readonly codeFoldable: boolean | undefined;
    readonly autoFoldThreshold: number | undefined;
}> & Readonly<{}>, {
    previewOnly: boolean;
    onChange: (v: string) => void;
    onHtmlChanged: (h: string) => void;
    onGetCatalog: (list: import("../../type").HeadList[]) => void;
    modelValue: string;
    mdHeadingId: import("../../type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    formatCopiedText: (text: string) => string;
    noHighlight: boolean;
    setting: import("../../type").SettingType;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default ContentPreview;
