// GO:{
//     global: undefined,100
//     fn fn: function fn(){};
// }

var global = 100
function fn(){
    console.log(global)
}

// AO:{

// }
//为什么去执行上下文查找,在编译的时候会创建一个调用栈(存放一个又一个执行上下文)，存入全局执行上下文GO,先入栈的在下面
// 在全局执行上下文GO中，一类是变量环境(var 声明的变量)，一类是词法环境(let和const声明的对象)     
// 在FN执行上下文 变量环境和词法环境
//始终都有一个指针，调用栈的指针，时刻都在记录着当前调用栈哪些上下文正在运行,如过在当前找不到,指针会下移,这个是由调用栈决定的
fn()